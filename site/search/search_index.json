{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Firebase \u00b6 Integration of Google Firebase services with shiny . Get Started Features \u00b6 Authentication Email & Password Email Link Google Github Facebook Twitter Microsoft Yahoo! Phone Analytics Track users, events, and more. Storage Use Firebase storage to securely store files. Installation \u00b6 CRAN Install the stable version from CRAN: install.packages ( \"firebase\" ) Github Install the development from Github using remotes: # install.packages(\"remotes\") remotes:: install_github ( \"JohnCoene/firebase\" ) Related \u00b6 Similar projects. Polished SaaS with R by Mark Edmondson Firebase with R by Andy Merlino Auth0 with Shiny Code of Conduct \u00b6 Please note that the firebase project is released with a Contributor Code of Conduct . By contributing to this project, you agree to abide by its terms.","title":"Home"},{"location":"#firebase","text":"Integration of Google Firebase services with shiny . Get Started","title":"Firebase"},{"location":"#features","text":"Authentication Email & Password Email Link Google Github Facebook Twitter Microsoft Yahoo! Phone Analytics Track users, events, and more. Storage Use Firebase storage to securely store files.","title":"Features"},{"location":"#installation","text":"CRAN Install the stable version from CRAN: install.packages ( \"firebase\" ) Github Install the development from Github using remotes: # install.packages(\"remotes\") remotes:: install_github ( \"JohnCoene/firebase\" )","title":"Installation"},{"location":"#related","text":"Similar projects. Polished SaaS with R by Mark Edmondson Firebase with R by Andy Merlino Auth0 with Shiny","title":"Related"},{"location":"#code-of-conduct","text":"Please note that the firebase project is released with a Contributor Code of Conduct . By contributing to this project, you agree to abide by its terms.","title":"Code of Conduct"},{"location":"analytics/","text":"Analytics \u00b6 One might want to integrate the authentication with Google Analytics. You can conditionally log event with the log_events method as well as register custom user properties with set_user_properties . Note Toggle the analytics on in your Firebase console. Example \u00b6 library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), firebaseUIContainer () ) server <- function (input, output){ f <- FirebaseUI$ new ()$ set_providers ( google = TRUE )$ launch () a <- Analytics$ new ()$ launch () observeEvent (f$ get_signed_in (), { f$ req_sign_in () a$ log_event ( 'notification_received' ); a$ set_user_properties (level = \"free\" ) }) } shinyApp (ui, server)","title":"Class"},{"location":"analytics/#analytics","text":"One might want to integrate the authentication with Google Analytics. You can conditionally log event with the log_events method as well as register custom user properties with set_user_properties . Note Toggle the analytics on in your Firebase console.","title":"Analytics"},{"location":"analytics/#example","text":"library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), firebaseUIContainer () ) server <- function (input, output){ f <- FirebaseUI$ new ()$ set_providers ( google = TRUE )$ launch () a <- Analytics$ new ()$ launch () observeEvent (f$ get_signed_in (), { f$ req_sign_in () a$ log_event ( 'notification_received' ); a$ set_user_properties (level = \"free\" ) }) } shinyApp (ui, server)","title":"Example"},{"location":"storage/","text":"Storage \u00b6 Firebase comes with many features, it is not limited to authentication. This document covers Firebase Storage , a storage system akin to AWS S3 though more flexible. Firebase Storage stores files, you can add files, download files, delete files, and list the files. These files can be in buckets, or directories. This requires the authentication to work, which has the advantage of easily ensuring that only those who may access certain files can. Let\u2019s start from a basic application that features authentication. The app below uses the pre-built UI, probably the simplest app that can be made using Firebase. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), reqSignin ( h4 ( \"Logged in!\" )) # hide from UI ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch } shinyApp (ui, server) Initialise \u00b6 To use the storage we need to Initialise it client-side, it\u2019s very simple. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), reqSignin ( h4 ( \"Logged in!\" )) # hide from UI ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch s <- Storage$ new () # initialise } shinyApp (ui, server) Reference \u00b6 A crucial concept with the Storage is the idea of the reference. The reference is the path, directory, or bucket one is currently working with. This is defined by a method on its own, methods used subsequently will then use this as reference. For instance one can reference the file test.png even if it does not exist, then calling the method to upload a file will upload the file as test.png . Make sure you keep track of this. Response \u00b6 Much of JavaScript works asynchronously, it\u2019s certainly one of its strong points. This means that when a function is called we do not receive the result from said function straight away, we get a promise back. Exactly like the R {promises} package. Hence when triggering a sign in with other classes of the package the response is not returned by the same function. This is because the results of the authentication are returned later, and we cannot know when. The same applies to the storage: when we upload a file we cannot know whether the upload was successful at the time of the upload, only later, and so on for every action we take on the storage. Therefore, upon performing such actions (upload, delete, etc.) we (optionally) specify a response . This response identifier can then be used with the get_response method to retrieve the results of said operation: get_response acts exactly like any other shiny input . Upload \u00b6 We can then upload a file with the upload_file method. Note that below we use a file on disk but you can use uploaded files: the method accepts the path to a file which can be obtained from a file upload in Shiny. We also set the reference ( ref ) to test.png , we\u2019ll be working with this file; it does not exist yet, we\u2019ll create it, download it, delete it, etc. The button to upload is only rendered if the user is logged in. The button triggers to upload_file method that uploads a file from the disk. We then retrieve and print the result of the upload with the get_response method. Note that you can set response to FALSE if you do not want to retrieve the results. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), reqSignin ( h4 ( \"Logged in!\" )), # hide from UI uiOutput ( \"uploadUI\" ) ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch s <- Storage$ new () $ ref ( \"test.png\" ) # upload a file output$uploadUI <- renderUI ({ f$ req_sign_in () actionButton ( \"upload\" , \"Upload Image\" ) }) observeEvent (input$upload, { s$ upload_file ( \"/path/to/file.png\" ) }) observeEvent (s$ get_response (), { print (s$ get_response ()) }) } shinyApp (ui, server) Download \u00b6 Once the file uploaded we can add a button to download the file. It does not truly download the file but will retrieve a valid URL to it. You may then do what you want with said link, download the file with {httr} (or {httr2}), use it as src atribute for a an <img/> tag, etc. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), reqSignin ( h4 ( \"Logged in!\" )), # hide from UI uiOutput ( \"uploadUI\" ), uiOutput ( \"downloadUI\" ) ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch s <- Storage$ new () $ ref ( \"test.png\" ) # upload a file output$uploadUI <- renderUI ({ f$ req_sign_in () actionButton ( \"upload\" , \"Upload Image\" ) }) observeEvent (input$upload, { s$ upload_file ( \"/path/to/file.png\" ) }) observeEvent (s$ get_response (), { print (s$ get_response ()) }) # download a file output$downloadUI <- renderUI ({ f$ req_sign_in () actionButton ( \"download\" , \"Download Image\" ) }) observeEvent (input$download, { s$ download_file ( \"dl\" ) }) observeEvent (s$ get_response ( \"dl\" ), { print (s$ get_response ( \"dl\" )) }) } shinyApp (ui, server) Delete \u00b6 To delete a file simply call the delete_file method. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), reqSignin ( h4 ( \"Logged in!\" )), # hide from UI uiOutput ( \"uploadUI\" ), uiOutput ( \"downloadUI\" ), uiOutput ( \"deleteUI\" ) ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch s <- Storage$ new () $ ref ( \"test.png\" ) # upload a file output$uploadUI <- renderUI ({ f$ req_sign_in () actionButton ( \"upload\" , \"Upload Image\" ) }) observeEvent (input$upload, { s$ upload_file ( \"/path/to/file.png\" ) }) observeEvent (s$ get_response (), { print (s$ get_response ()) }) # download a file output$downloadUI <- renderUI ({ f$ req_sign_in () actionButton ( \"download\" , \"Download Image\" ) }) observeEvent (input$download, { s$ download_file ( \"dl\" ) }) observeEvent (s$ get_response ( \"dl\" ), { print (s$ get_response ( \"dl\" )) }) # delete file output$deleteUI <- renderUI ({ f$ req_sign_in () actionButton ( \"delete\" , \"Delete Image\" ) }) observeEvent (input$delete, { s$ delete_file ( \"del\" ) }) observeEvent (s$ get_response ( \"del\" ), { print (s$ get_response ( \"del\" )) }) } shinyApp (ui, server) Other Methods \u00b6 There are other methods to list files, and retrieve metadata but they work exactly like all others so we\u2019ll live it at that","title":"Class"},{"location":"storage/#storage","text":"Firebase comes with many features, it is not limited to authentication. This document covers Firebase Storage , a storage system akin to AWS S3 though more flexible. Firebase Storage stores files, you can add files, download files, delete files, and list the files. These files can be in buckets, or directories. This requires the authentication to work, which has the advantage of easily ensuring that only those who may access certain files can. Let\u2019s start from a basic application that features authentication. The app below uses the pre-built UI, probably the simplest app that can be made using Firebase. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), reqSignin ( h4 ( \"Logged in!\" )) # hide from UI ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch } shinyApp (ui, server)","title":"Storage"},{"location":"storage/#initialise","text":"To use the storage we need to Initialise it client-side, it\u2019s very simple. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), reqSignin ( h4 ( \"Logged in!\" )) # hide from UI ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch s <- Storage$ new () # initialise } shinyApp (ui, server)","title":"Initialise"},{"location":"storage/#reference","text":"A crucial concept with the Storage is the idea of the reference. The reference is the path, directory, or bucket one is currently working with. This is defined by a method on its own, methods used subsequently will then use this as reference. For instance one can reference the file test.png even if it does not exist, then calling the method to upload a file will upload the file as test.png . Make sure you keep track of this.","title":"Reference"},{"location":"storage/#response","text":"Much of JavaScript works asynchronously, it\u2019s certainly one of its strong points. This means that when a function is called we do not receive the result from said function straight away, we get a promise back. Exactly like the R {promises} package. Hence when triggering a sign in with other classes of the package the response is not returned by the same function. This is because the results of the authentication are returned later, and we cannot know when. The same applies to the storage: when we upload a file we cannot know whether the upload was successful at the time of the upload, only later, and so on for every action we take on the storage. Therefore, upon performing such actions (upload, delete, etc.) we (optionally) specify a response . This response identifier can then be used with the get_response method to retrieve the results of said operation: get_response acts exactly like any other shiny input .","title":"Response"},{"location":"storage/#upload","text":"We can then upload a file with the upload_file method. Note that below we use a file on disk but you can use uploaded files: the method accepts the path to a file which can be obtained from a file upload in Shiny. We also set the reference ( ref ) to test.png , we\u2019ll be working with this file; it does not exist yet, we\u2019ll create it, download it, delete it, etc. The button to upload is only rendered if the user is logged in. The button triggers to upload_file method that uploads a file from the disk. We then retrieve and print the result of the upload with the get_response method. Note that you can set response to FALSE if you do not want to retrieve the results. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), reqSignin ( h4 ( \"Logged in!\" )), # hide from UI uiOutput ( \"uploadUI\" ) ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch s <- Storage$ new () $ ref ( \"test.png\" ) # upload a file output$uploadUI <- renderUI ({ f$ req_sign_in () actionButton ( \"upload\" , \"Upload Image\" ) }) observeEvent (input$upload, { s$ upload_file ( \"/path/to/file.png\" ) }) observeEvent (s$ get_response (), { print (s$ get_response ()) }) } shinyApp (ui, server)","title":"Upload"},{"location":"storage/#download","text":"Once the file uploaded we can add a button to download the file. It does not truly download the file but will retrieve a valid URL to it. You may then do what you want with said link, download the file with {httr} (or {httr2}), use it as src atribute for a an <img/> tag, etc. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), reqSignin ( h4 ( \"Logged in!\" )), # hide from UI uiOutput ( \"uploadUI\" ), uiOutput ( \"downloadUI\" ) ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch s <- Storage$ new () $ ref ( \"test.png\" ) # upload a file output$uploadUI <- renderUI ({ f$ req_sign_in () actionButton ( \"upload\" , \"Upload Image\" ) }) observeEvent (input$upload, { s$ upload_file ( \"/path/to/file.png\" ) }) observeEvent (s$ get_response (), { print (s$ get_response ()) }) # download a file output$downloadUI <- renderUI ({ f$ req_sign_in () actionButton ( \"download\" , \"Download Image\" ) }) observeEvent (input$download, { s$ download_file ( \"dl\" ) }) observeEvent (s$ get_response ( \"dl\" ), { print (s$ get_response ( \"dl\" )) }) } shinyApp (ui, server)","title":"Download"},{"location":"storage/#delete","text":"To delete a file simply call the delete_file method. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), reqSignin ( h4 ( \"Logged in!\" )), # hide from UI uiOutput ( \"uploadUI\" ), uiOutput ( \"downloadUI\" ), uiOutput ( \"deleteUI\" ) ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch s <- Storage$ new () $ ref ( \"test.png\" ) # upload a file output$uploadUI <- renderUI ({ f$ req_sign_in () actionButton ( \"upload\" , \"Upload Image\" ) }) observeEvent (input$upload, { s$ upload_file ( \"/path/to/file.png\" ) }) observeEvent (s$ get_response (), { print (s$ get_response ()) }) # download a file output$downloadUI <- renderUI ({ f$ req_sign_in () actionButton ( \"download\" , \"Download Image\" ) }) observeEvent (input$download, { s$ download_file ( \"dl\" ) }) observeEvent (s$ get_response ( \"dl\" ), { print (s$ get_response ( \"dl\" )) }) # delete file output$deleteUI <- renderUI ({ f$ req_sign_in () actionButton ( \"delete\" , \"Delete Image\" ) }) observeEvent (input$delete, { s$ delete_file ( \"del\" ) }) observeEvent (s$ get_response ( \"del\" ), { print (s$ get_response ( \"del\" )) }) } shinyApp (ui, server)","title":"Delete"},{"location":"storage/#other-methods","text":"There are other methods to list files, and retrieve metadata but they work exactly like all others so we\u2019ll live it at that","title":"Other Methods"},{"location":"auth/demo/","text":"Demo \u00b6 The code for the demo which provides 7 different sign in methods uses the FirebaseUI and is remarkably simple, see below. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), useFirebaseUI (), reqSignin ( actionButton ( \"signout\" , \"Sign out\" )), uiOutput ( \"msg\" ), plotOutput ( \"plot\" ) ) server <- function (input, output){ f <- FirebaseUI$ new ( \"session\" )$ set_providers ( email = TRUE , yahoo = TRUE , google = TRUE , github = TRUE , twitter = TRUE , facebook = TRUE , microsoft = TRUE )$ launch () output$plot <- renderPlot ({ f$ req_sign_in () # require sign in plot (cars) }) output$msg <- renderUI ({ f$ req_sign_in () # require sign in user <- f$ get_signed_in () # get logged in user info print (user) h4 ( \"Welcome,\" , user$response$displayName) }) observeEvent (input$signout, { f$ sign_out () }) } shinyApp (ui, server)","title":"Demo"},{"location":"auth/demo/#demo","text":"The code for the demo which provides 7 different sign in methods uses the FirebaseUI and is remarkably simple, see below. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), useFirebaseUI (), reqSignin ( actionButton ( \"signout\" , \"Sign out\" )), uiOutput ( \"msg\" ), plotOutput ( \"plot\" ) ) server <- function (input, output){ f <- FirebaseUI$ new ( \"session\" )$ set_providers ( email = TRUE , yahoo = TRUE , google = TRUE , github = TRUE , twitter = TRUE , facebook = TRUE , microsoft = TRUE )$ launch () output$plot <- renderPlot ({ f$ req_sign_in () # require sign in plot (cars) }) output$msg <- renderUI ({ f$ req_sign_in () # require sign in user <- f$ get_signed_in () # get logged in user info print (user) h4 ( \"Welcome,\" , user$response$displayName) }) observeEvent (input$signout, { f$ sign_out () }) } shinyApp (ui, server)","title":"Demo"},{"location":"auth/email-link/","text":"Email Link \u00b6 Creating an authentication flow using an email link is very similar to creating one with an email and password. The only difference is that we we don\u2019t observe for successful account creation but successful email sent with the get_email_sent method. Redirect URL Note that you have to specify the redirect URL in your config. Below we force shiny to run on port 3000 so we can reference the redirect URL in the config which is mandatory as the email link must obviously a link back to your application; options(shiny.port = 3000) is not necessary in prod. library (shiny) library (firebase) options (shiny.port = 3000 ) ui <- fluidPage ( useFirebase (), textInput ( \"email\" , \"Your email\" ), actionButton ( \"submit\" , \"Submit\" ) ) server <- function (input, output){ f <- FirebaseEmailLink$ new ()$ config (url = \"http://127.0.0.1:3000\" ) observeEvent (input$submit, { if (input$email == \"\" ) return () f$ send_email (input$email) }) observeEvent (f$ get_email_sent (), { sent <- f$ get_email_sent () if (sent$success) showNotification ( \"Email sent\" , type = \"message\" ) }) observeEvent (f$ get_email_verification (), { print (f$ get_email_verification ()) }) } shinyApp (ui, server)","title":"Email Link"},{"location":"auth/email-link/#email-link","text":"Creating an authentication flow using an email link is very similar to creating one with an email and password. The only difference is that we we don\u2019t observe for successful account creation but successful email sent with the get_email_sent method. Redirect URL Note that you have to specify the redirect URL in your config. Below we force shiny to run on port 3000 so we can reference the redirect URL in the config which is mandatory as the email link must obviously a link back to your application; options(shiny.port = 3000) is not necessary in prod. library (shiny) library (firebase) options (shiny.port = 3000 ) ui <- fluidPage ( useFirebase (), textInput ( \"email\" , \"Your email\" ), actionButton ( \"submit\" , \"Submit\" ) ) server <- function (input, output){ f <- FirebaseEmailLink$ new ()$ config (url = \"http://127.0.0.1:3000\" ) observeEvent (input$submit, { if (input$email == \"\" ) return () f$ send_email (input$email) }) observeEvent (f$ get_email_sent (), { sent <- f$ get_email_sent () if (sent$success) showNotification ( \"Email sent\" , type = \"message\" ) }) observeEvent (f$ get_email_verification (), { print (f$ get_email_verification ()) }) } shinyApp (ui, server)","title":"Email Link"},{"location":"auth/email-password/","text":"Email & Password \u00b6 As shown in the Prebuilt UI page one can allow users to sign in with an email and a password. A we detail here we can also do so by building the UI ourselves, which very straightforward using shiny\u2019s inputs. However, while the prebuilt UI does not distinguish between account creation and signing in, we will here. We will thus build an application that, using an email and password, allows the user to create an account then login with said account. Let us first build the skeleton of the application. library (shiny) library (firebase) # modals register <- modalDialog ( title = \"Register\" , textInput ( \"email_create\" , \"Your email\" ), passwordInput ( \"password_create\" , \"Your password\" ), footer = actionButton ( \"create\" , \"Register\" ) ) sign_in <- modalDialog ( title = \"Sign in\" , textInput ( \"email_signin\" , \"Your email\" ), passwordInput ( \"password_signin\" , \"Your password\" ), actionButton ( \"signin\" , \"Sign in\" ) ) ui <- fluidPage ( useFirebase (), # import dependencies actionButton ( \"register_modal\" , \"Register\" ), actionButton ( \"signin_modal\" , \"Signin\" ) ) server <- function (input, output){ # open modals observeEvent (input$register_modal, { showModal (register) }) observeEvent (input$signin_modal, { showModal (sign_in) }) } shinyApp (ui, server) Now with this skeleton ready let\u2019s initialise firebase and implement the account creation. First, initialise the authentication with FirebaseEmailPassword . Then use the create method to create the user\u2019s account using their email and password. One thing in the snippet below that is optional but very nice to have is to observe the get_created method. This method returns information on the account creation; a list that contains the object success , a boolean indicating whether the authentication was successful as well as the response from Firebase. Observing for changes in the account creation lets us show a notification to the user and remove the modal when necessary. library (shiny) library (firebase) # modals register <- modalDialog ( title = \"Register\" , textInput ( \"email_create\" , \"Your email\" ), passwordInput ( \"password_create\" , \"Your password\" ), footer = actionButton ( \"create\" , \"Register\" ) ) sign_in <- modalDialog ( title = \"Sign in\" , textInput ( \"email_signin\" , \"Your email\" ), passwordInput ( \"password_signin\" , \"Your password\" ), footer = actionButton ( \"signin\" , \"Sign in\" ) ) ui <- fluidPage ( useFirebase (), # import dependencies actionButton ( \"register_modal\" , \"Register\" ), actionButton ( \"signin_modal\" , \"Signin\" ) ) server <- function (input, output){ f <- FirebaseEmailPassword$ new () # open modals observeEvent (input$register_modal, { showModal (register) }) observeEvent (input$signin_modal, { showModal (sign_in) }) # create the user observeEvent (input$create, { f$ create (input$email_create, input$password_create) }) # check if creation sucessful observeEvent (f$ get_created (), { created <- f$ get_created () if (created$success){ removeModal () showNotification ( \"Account created!\" , type = \"message\" ) } else { showNotification ( \"Error!\" , type = \"error\" ) } # print results to the console print (created) }) } shinyApp (ui, server) The sign in process is like that of other authentication methods. library (shiny) library (firebase) # modals register <- modalDialog ( title = \"Register\" , textInput ( \"email_create\" , \"Your email\" ), passwordInput ( \"password_create\" , \"Your password\" ), footer = actionButton ( \"create\" , \"Register\" ) ) sign_in <- modalDialog ( title = \"Sign in\" , textInput ( \"email_signin\" , \"Your email\" ), passwordInput ( \"password_signin\" , \"Your password\" ), footer = actionButton ( \"signin\" , \"Sign in\" ) ) ui <- fluidPage ( useFirebase (), # import dependencies actionButton ( \"register_modal\" , \"Register\" ), actionButton ( \"signin_modal\" , \"Signin\" ), plotOutput ( \"plot\" ) ) server <- function (input, output){ f <- FirebaseEmailPassword$ new () # open modals observeEvent (input$register_modal, { showModal (register) }) observeEvent (input$signin_modal, { showModal (sign_in) }) # create the user observeEvent (input$create, { f$ create (input$email_create, input$password_create) }) # check if creation sucessful observeEvent (f$ get_created (), { created <- f$ get_created () if (created$success){ removeModal () showNotification ( \"Account created!\" , type = \"message\" ) } else { showNotification ( \"Error!\" , type = \"error\" ) } # print results to the console print (created) }) observeEvent (input$signin, { removeModal () f$ sign_in (input$email_signin, input$password_signin) }) output$plot <- renderPlot ({ f$ req_sign_in () plot (cars) }) } shinyApp (ui, server)","title":"Email & Password"},{"location":"auth/email-password/#email-password","text":"As shown in the Prebuilt UI page one can allow users to sign in with an email and a password. A we detail here we can also do so by building the UI ourselves, which very straightforward using shiny\u2019s inputs. However, while the prebuilt UI does not distinguish between account creation and signing in, we will here. We will thus build an application that, using an email and password, allows the user to create an account then login with said account. Let us first build the skeleton of the application. library (shiny) library (firebase) # modals register <- modalDialog ( title = \"Register\" , textInput ( \"email_create\" , \"Your email\" ), passwordInput ( \"password_create\" , \"Your password\" ), footer = actionButton ( \"create\" , \"Register\" ) ) sign_in <- modalDialog ( title = \"Sign in\" , textInput ( \"email_signin\" , \"Your email\" ), passwordInput ( \"password_signin\" , \"Your password\" ), actionButton ( \"signin\" , \"Sign in\" ) ) ui <- fluidPage ( useFirebase (), # import dependencies actionButton ( \"register_modal\" , \"Register\" ), actionButton ( \"signin_modal\" , \"Signin\" ) ) server <- function (input, output){ # open modals observeEvent (input$register_modal, { showModal (register) }) observeEvent (input$signin_modal, { showModal (sign_in) }) } shinyApp (ui, server) Now with this skeleton ready let\u2019s initialise firebase and implement the account creation. First, initialise the authentication with FirebaseEmailPassword . Then use the create method to create the user\u2019s account using their email and password. One thing in the snippet below that is optional but very nice to have is to observe the get_created method. This method returns information on the account creation; a list that contains the object success , a boolean indicating whether the authentication was successful as well as the response from Firebase. Observing for changes in the account creation lets us show a notification to the user and remove the modal when necessary. library (shiny) library (firebase) # modals register <- modalDialog ( title = \"Register\" , textInput ( \"email_create\" , \"Your email\" ), passwordInput ( \"password_create\" , \"Your password\" ), footer = actionButton ( \"create\" , \"Register\" ) ) sign_in <- modalDialog ( title = \"Sign in\" , textInput ( \"email_signin\" , \"Your email\" ), passwordInput ( \"password_signin\" , \"Your password\" ), footer = actionButton ( \"signin\" , \"Sign in\" ) ) ui <- fluidPage ( useFirebase (), # import dependencies actionButton ( \"register_modal\" , \"Register\" ), actionButton ( \"signin_modal\" , \"Signin\" ) ) server <- function (input, output){ f <- FirebaseEmailPassword$ new () # open modals observeEvent (input$register_modal, { showModal (register) }) observeEvent (input$signin_modal, { showModal (sign_in) }) # create the user observeEvent (input$create, { f$ create (input$email_create, input$password_create) }) # check if creation sucessful observeEvent (f$ get_created (), { created <- f$ get_created () if (created$success){ removeModal () showNotification ( \"Account created!\" , type = \"message\" ) } else { showNotification ( \"Error!\" , type = \"error\" ) } # print results to the console print (created) }) } shinyApp (ui, server) The sign in process is like that of other authentication methods. library (shiny) library (firebase) # modals register <- modalDialog ( title = \"Register\" , textInput ( \"email_create\" , \"Your email\" ), passwordInput ( \"password_create\" , \"Your password\" ), footer = actionButton ( \"create\" , \"Register\" ) ) sign_in <- modalDialog ( title = \"Sign in\" , textInput ( \"email_signin\" , \"Your email\" ), passwordInput ( \"password_signin\" , \"Your password\" ), footer = actionButton ( \"signin\" , \"Sign in\" ) ) ui <- fluidPage ( useFirebase (), # import dependencies actionButton ( \"register_modal\" , \"Register\" ), actionButton ( \"signin_modal\" , \"Signin\" ), plotOutput ( \"plot\" ) ) server <- function (input, output){ f <- FirebaseEmailPassword$ new () # open modals observeEvent (input$register_modal, { showModal (register) }) observeEvent (input$signin_modal, { showModal (sign_in) }) # create the user observeEvent (input$create, { f$ create (input$email_create, input$password_create) }) # check if creation sucessful observeEvent (f$ get_created (), { created <- f$ get_created () if (created$success){ removeModal () showNotification ( \"Account created!\" , type = \"message\" ) } else { showNotification ( \"Error!\" , type = \"error\" ) } # print results to the console print (created) }) observeEvent (input$signin, { removeModal () f$ sign_in (input$email_signin, input$password_signin) }) output$plot <- renderPlot ({ f$ req_sign_in () plot (cars) }) } shinyApp (ui, server)","title":"Email &amp; Password"},{"location":"auth/flow/","text":"Flow \u00b6 There are two different authentication \u201cflows:\u201d redirect and popup (default). The former redirect the user to another tab while the latter opens up in a popup window. Usage \u00b6 Finally, we currently provide a sign-in method but we do not do anything with it. Generally, we will need to block of hide all or the parts of the app that requires sign-in. There are two ways to go about this, 1) an insecure way in which we hide the UI elements before the user signs in but the user could, with basic CSS, reveal those elements before signing in. 2) A more secure way in which one waits for the user to sign in to render certain elements. The first happens UI-side and is very easy to implement, the second happens server-side. UI \u00b6 Insecure method This method is convenient but not secure use the \u201cserver\u201d method instead. Rather straightforward but might not work for all elements. Use reqSignin to wrap UI elements that require sign in. Below we wrap some text and a plot, only signed in users can see them. There is also the corollary, reqSignout which will only show when the user is not signed in. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), reqSignout ( h1 ( \"Please sign in\" ) ), reqSignin ( h4 ( \"VIP plot below\" ), plotOutput ( \"plot\" ) ) ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch output$plot <- renderPlot ({ plot (cars) }) } shinyApp (ui, server) Server \u00b6 Server-side you can either manually check that the user has signed in with the is_signed_in method, which returns TRUE if a user is signed in and FALSE otherwise. Or you can use the convenient req_sign_in in your outputs make sign in required for them. Recommended You are strongly advised to use this method. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), uiOutput ( \"msg\" ), reqSignin ( h4 ( \"VIP plot below\" )), # hide from UI plotOutput ( \"plot\" ) ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch output$msg <- renderUI ({ f$ req_sign_out () h2 ( \"Please sign in\" ) }) output$plot <- renderPlot ({ f$ req_sign_in () # require sign in plot (cars) }) } shinyApp (ui, server)","title":"Flow"},{"location":"auth/flow/#flow","text":"There are two different authentication \u201cflows:\u201d redirect and popup (default). The former redirect the user to another tab while the latter opens up in a popup window.","title":"Flow"},{"location":"auth/flow/#usage","text":"Finally, we currently provide a sign-in method but we do not do anything with it. Generally, we will need to block of hide all or the parts of the app that requires sign-in. There are two ways to go about this, 1) an insecure way in which we hide the UI elements before the user signs in but the user could, with basic CSS, reveal those elements before signing in. 2) A more secure way in which one waits for the user to sign in to render certain elements. The first happens UI-side and is very easy to implement, the second happens server-side.","title":"Usage"},{"location":"auth/flow/#ui","text":"Insecure method This method is convenient but not secure use the \u201cserver\u201d method instead. Rather straightforward but might not work for all elements. Use reqSignin to wrap UI elements that require sign in. Below we wrap some text and a plot, only signed in users can see them. There is also the corollary, reqSignout which will only show when the user is not signed in. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), reqSignout ( h1 ( \"Please sign in\" ) ), reqSignin ( h4 ( \"VIP plot below\" ), plotOutput ( \"plot\" ) ) ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch output$plot <- renderPlot ({ plot (cars) }) } shinyApp (ui, server)","title":"UI"},{"location":"auth/flow/#server","text":"Server-side you can either manually check that the user has signed in with the is_signed_in method, which returns TRUE if a user is signed in and FALSE otherwise. Or you can use the convenient req_sign_in in your outputs make sign in required for them. Recommended You are strongly advised to use this method. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), uiOutput ( \"msg\" ), reqSignin ( h4 ( \"VIP plot below\" )), # hide from UI plotOutput ( \"plot\" ) ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch output$msg <- renderUI ({ f$ req_sign_out () h2 ( \"Please sign in\" ) }) output$plot <- renderPlot ({ f$ req_sign_in () # require sign in plot (cars) }) } shinyApp (ui, server)","title":"Server"},{"location":"auth/manage/","text":"Manage Users \u00b6 Sign in \u00b6 You can always access the signed in user with the get_signed_in method. This returns a list of length 2: signed_in : boolean user : a list ( NULL if signed out) The user object returned looks like. #> $success #> [1] TRUE #> #> $response #> $response$uid #> [1] \"xxx\" #> #> $response$displayName #> NULL #> #> $response$photoURL #> NULL #> #> $response$email #> [1] \"john@opifex.org\" #> #> $response$emailVerified #> [1] FALSE #> #> $response$phoneNumber #> NULL #> #> $response$isAnonymous #> [1] FALSE #> #> $response$tenantId #> NULL #> #> $response$providerData #> $response$providerData[[1]] #> $response$providerData[[1]]$uid #> [1] \"john@opifex.org\" #> #> $response$providerData[[1]]$displayName #> NULL #> #> $response$providerData[[1]]$photoURL #> NULL #> #> $response$providerData[[1]]$email #> [1] \"john@opifex.org\" #> #> $response$providerData[[1]]$phoneNumber #> NULL #> #> $response$providerData[[1]]$providerId #> [1] \"password\" #> #> #> #> $response$apiKey #> [1] \"xxx\" #> #> $response$appName #> [1] \"[DEFAULT]\" #> #> $response$authDomain #> [1] \"fireblaze-r-package.firebaseapp.com\" #> #> $response$stsTokenManager #> $response$stsTokenManager$apiKey #> [1] \"xxx\" #> #> $response$stsTokenManager$refreshToken #> [1] \"xxx\" #> #> $response$stsTokenManager$accessToken #> [1] \"xxx\" #> #> $response$stsTokenManager$expirationTime #> [1] 1.63173e+12 #> #> #> $response$redirectEventId #> NULL #> #> $response$lastLoginAt #> [1] \"1631726033959\" #> #> $response$createdAt #> [1] \"1631639076093\" #> #> $response$multiFactor #> $response$multiFactor$enrolledFactors #> list() Note this is technically like a Shiny input and behaves as such. Therefore the snippet below will work. Note that it will be triggered on load. # initialise f <- FireblazeUI$ new ()$ launch () observeEvent (f$ get_signed_in (), { # do somethind }) However one should probably only rely on the get_signed_in to retrieve information about the logged in user, the methods is_signed_in and req_sign_in should be used in observers instead. The first returns TRUE if the user is signed in. The second, req_sign_in is a convenience method which essentially does req(f$is_signed_in) which allows \u201cmarking\u201d outputs and observers that require sign in. Sign out \u00b6 A single method is shared across all authentication methods, simply call sign_out method. Re-auth \u00b6 Two sensitive operations, deleting an account, and changing a password (only application to email & password method), might require that you re-authenticate the user. These operations being dangerous they will fail if the user has been signed in for a long time and you will have to first re-authenticate them using their current password. f <- FirebaseEmailPassword$ new () # upon clicking a button observeEvent (input$reAuth, { # pass the freshly entered user password f$ re_authenticate (input$reAuthPassword) }) # check if reauth successful observeEvent (f$ get_re_authenticated (), { reauth <- f$ get_re_authenticated () # TRUE if successful print (reauth$success) }) Delete \u00b6 Simply use the delete_user method and observe the result with the get_delete_user method. This will likely required re-authentication. Email & Password \u00b6 Signing in users with email and password may require some work, at times, to manage them. You might want to send them an email verification link, allow them to change or reset their password. You can freely send a verification email with the send_verification_email and receive the response to it with get_verification_email .","title":"Manage Users"},{"location":"auth/manage/#manage-users","text":"","title":"Manage Users"},{"location":"auth/manage/#sign-in","text":"You can always access the signed in user with the get_signed_in method. This returns a list of length 2: signed_in : boolean user : a list ( NULL if signed out) The user object returned looks like. #> $success #> [1] TRUE #> #> $response #> $response$uid #> [1] \"xxx\" #> #> $response$displayName #> NULL #> #> $response$photoURL #> NULL #> #> $response$email #> [1] \"john@opifex.org\" #> #> $response$emailVerified #> [1] FALSE #> #> $response$phoneNumber #> NULL #> #> $response$isAnonymous #> [1] FALSE #> #> $response$tenantId #> NULL #> #> $response$providerData #> $response$providerData[[1]] #> $response$providerData[[1]]$uid #> [1] \"john@opifex.org\" #> #> $response$providerData[[1]]$displayName #> NULL #> #> $response$providerData[[1]]$photoURL #> NULL #> #> $response$providerData[[1]]$email #> [1] \"john@opifex.org\" #> #> $response$providerData[[1]]$phoneNumber #> NULL #> #> $response$providerData[[1]]$providerId #> [1] \"password\" #> #> #> #> $response$apiKey #> [1] \"xxx\" #> #> $response$appName #> [1] \"[DEFAULT]\" #> #> $response$authDomain #> [1] \"fireblaze-r-package.firebaseapp.com\" #> #> $response$stsTokenManager #> $response$stsTokenManager$apiKey #> [1] \"xxx\" #> #> $response$stsTokenManager$refreshToken #> [1] \"xxx\" #> #> $response$stsTokenManager$accessToken #> [1] \"xxx\" #> #> $response$stsTokenManager$expirationTime #> [1] 1.63173e+12 #> #> #> $response$redirectEventId #> NULL #> #> $response$lastLoginAt #> [1] \"1631726033959\" #> #> $response$createdAt #> [1] \"1631639076093\" #> #> $response$multiFactor #> $response$multiFactor$enrolledFactors #> list() Note this is technically like a Shiny input and behaves as such. Therefore the snippet below will work. Note that it will be triggered on load. # initialise f <- FireblazeUI$ new ()$ launch () observeEvent (f$ get_signed_in (), { # do somethind }) However one should probably only rely on the get_signed_in to retrieve information about the logged in user, the methods is_signed_in and req_sign_in should be used in observers instead. The first returns TRUE if the user is signed in. The second, req_sign_in is a convenience method which essentially does req(f$is_signed_in) which allows \u201cmarking\u201d outputs and observers that require sign in.","title":"Sign in"},{"location":"auth/manage/#sign-out","text":"A single method is shared across all authentication methods, simply call sign_out method.","title":"Sign out"},{"location":"auth/manage/#re-auth","text":"Two sensitive operations, deleting an account, and changing a password (only application to email & password method), might require that you re-authenticate the user. These operations being dangerous they will fail if the user has been signed in for a long time and you will have to first re-authenticate them using their current password. f <- FirebaseEmailPassword$ new () # upon clicking a button observeEvent (input$reAuth, { # pass the freshly entered user password f$ re_authenticate (input$reAuthPassword) }) # check if reauth successful observeEvent (f$ get_re_authenticated (), { reauth <- f$ get_re_authenticated () # TRUE if successful print (reauth$success) })","title":"Re-auth"},{"location":"auth/manage/#delete","text":"Simply use the delete_user method and observe the result with the get_delete_user method. This will likely required re-authentication.","title":"Delete"},{"location":"auth/manage/#email-password","text":"Signing in users with email and password may require some work, at times, to manage them. You might want to send them an email verification link, allow them to change or reset their password. You can freely send a verification email with the send_verification_email and receive the response to it with get_verification_email .","title":"Email &amp; Password"},{"location":"auth/oauth-providers/","text":"Oauth Providers \u00b6 You might have already browsed the guide on social sign in . They are in fact convenience wrapper to the more general \u201cOauth providers\u201d class. It works in a very similar fashion and can even prove more convenient. R Package \u00b6 First, instantiate the authentication from FirebaseOauthProviders , then define the provider you want to use with set_provider , finally launch whenever you want. Below we have the authentication launch at the click of a button. We provide Microsoft by simply setting microsoft.com as provider. All that is needed to change to say Yahoo! is to change the provider to yahoo.com for instance. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), actionButton ( \"signin\" , \"Sign in with Microsoft\" , icon = icon ( \"microsoft\" )), plotOutput ( \"plot\" ) ) server <- function (input, output, session){ f <- FirebaseOauthProviders$ new ()$ set_provider ( \"microsoft.com\" ) observeEvent (input$signin, { f$ launch () }) output$plot <- renderPlot ({ f$ req_sign_in () plot (cars) }) } shinyApp (ui, server) Console Setup \u00b6 The R-side of things is rather easy so here we briefly explain how to integrate those oauth providers with the Firebase console. Yahoo \u00b6 For Yahoo it is fairly straightforward. Open you console under \u201cSign-in method\u201d tab and enable Yahoo! as show below. To get the necessary app ID and app secret visit this link and create an app Redirect URL Make sure you enter the \u201cRedirect URI(s)\u201d given to you by Firebase which resembles https://my-application.firebaseapp.com/__/auth/handler and tick the OpenID Connect Permissions at the bottom. On the resulting screen copy the app ID and secret to your Firebase console. Microsoft \u00b6 Authenticating via Microsoft is handled by Microsoft Azure, create a free account if you do not have one the: Visit the portal Search and select \u201cAzure Active Directory\u201d In the left sidebar under \u201cManage\u201d select \u201cApp registrations\u201d Then click New registrations Under \u201cRedirect URI\u201d select \u201cWeb\u201d and place the redirect URL given by Firebase Once created, on the \u201coverview\u201d screen copy the \u201cApplication (client) ID\u201d to Firebase The visit \u201cCertificates & secrets\u201d in the sidebar Create a \u201cNew client secret\u201d and copy it to Firebase Once this done give Microsoft 2 minutes to sync before trying the authentication.","title":"OAuth Providers"},{"location":"auth/oauth-providers/#oauth-providers","text":"You might have already browsed the guide on social sign in . They are in fact convenience wrapper to the more general \u201cOauth providers\u201d class. It works in a very similar fashion and can even prove more convenient.","title":"Oauth Providers"},{"location":"auth/oauth-providers/#r-package","text":"First, instantiate the authentication from FirebaseOauthProviders , then define the provider you want to use with set_provider , finally launch whenever you want. Below we have the authentication launch at the click of a button. We provide Microsoft by simply setting microsoft.com as provider. All that is needed to change to say Yahoo! is to change the provider to yahoo.com for instance. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), actionButton ( \"signin\" , \"Sign in with Microsoft\" , icon = icon ( \"microsoft\" )), plotOutput ( \"plot\" ) ) server <- function (input, output, session){ f <- FirebaseOauthProviders$ new ()$ set_provider ( \"microsoft.com\" ) observeEvent (input$signin, { f$ launch () }) output$plot <- renderPlot ({ f$ req_sign_in () plot (cars) }) } shinyApp (ui, server)","title":"R Package"},{"location":"auth/oauth-providers/#console-setup","text":"The R-side of things is rather easy so here we briefly explain how to integrate those oauth providers with the Firebase console.","title":"Console Setup"},{"location":"auth/oauth-providers/#yahoo","text":"For Yahoo it is fairly straightforward. Open you console under \u201cSign-in method\u201d tab and enable Yahoo! as show below. To get the necessary app ID and app secret visit this link and create an app Redirect URL Make sure you enter the \u201cRedirect URI(s)\u201d given to you by Firebase which resembles https://my-application.firebaseapp.com/__/auth/handler and tick the OpenID Connect Permissions at the bottom. On the resulting screen copy the app ID and secret to your Firebase console.","title":" Yahoo"},{"location":"auth/oauth-providers/#microsoft","text":"Authenticating via Microsoft is handled by Microsoft Azure, create a free account if you do not have one the: Visit the portal Search and select \u201cAzure Active Directory\u201d In the left sidebar under \u201cManage\u201d select \u201cApp registrations\u201d Then click New registrations Under \u201cRedirect URI\u201d select \u201cWeb\u201d and place the redirect URL given by Firebase Once created, on the \u201coverview\u201d screen copy the \u201cApplication (client) ID\u201d to Firebase The visit \u201cCertificates & secrets\u201d in the sidebar Create a \u201cNew client secret\u201d and copy it to Firebase Once this done give Microsoft 2 minutes to sync before trying the authentication.","title":" Microsoft"},{"location":"auth/phone/","text":"Phone \u00b6 In the latest version you can also allow signing in with mobile phone numbers. Enable Method Remember to enable this sign in method in your Firebase console. 1. Verify \u00b6 First, collect the user\u2019s phone number and the recaptcha. To collect the capta, simply place recaptchaUI where you want it to display. Note that it will apply only after you run the verfify method (see below). 2. Confirm \u00b6 Once the verify method has run the user receives a confirmation code that you must also capture and pass to confirm to confirm the authentication. The user is then automatically logged in. Example \u00b6 This is an overly simple, ugly example, but fully-functioning. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), textInput ( \"number\" , \"Number\" ), actionButton ( \"verify\" , \"Verify\" ), recaptchaUI (), textInput ( \"code\" , \"Code\" ), actionButton ( \"confirm\" , \"Confirm\" ) ) server <- function (input, output, session) { f <- FirebasePhone$ new () observeEvent (input$verify, { f$ verify (input$number) }) observeEvent (f$ get_verification (), { print (f$ get_verification ()) }) observeEvent (input$confirm, { f$ confirm (input$code) }) observeEvent (f$ get_confirmation (), { print (f$ get_confirmation ()) }) } shinyApp (ui, server)","title":"Phone"},{"location":"auth/phone/#phone","text":"In the latest version you can also allow signing in with mobile phone numbers. Enable Method Remember to enable this sign in method in your Firebase console.","title":"Phone"},{"location":"auth/phone/#1-verify","text":"First, collect the user\u2019s phone number and the recaptcha. To collect the capta, simply place recaptchaUI where you want it to display. Note that it will apply only after you run the verfify method (see below).","title":"1. Verify"},{"location":"auth/phone/#2-confirm","text":"Once the verify method has run the user receives a confirmation code that you must also capture and pass to confirm to confirm the authentication. The user is then automatically logged in.","title":"2. Confirm"},{"location":"auth/phone/#example","text":"This is an overly simple, ugly example, but fully-functioning. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), textInput ( \"number\" , \"Number\" ), actionButton ( \"verify\" , \"Verify\" ), recaptchaUI (), textInput ( \"code\" , \"Code\" ), actionButton ( \"confirm\" , \"Confirm\" ) ) server <- function (input, output, session) { f <- FirebasePhone$ new () observeEvent (input$verify, { f$ verify (input$number) }) observeEvent (f$ get_verification (), { print (f$ get_verification ()) }) observeEvent (input$confirm, { f$ confirm (input$code) }) observeEvent (f$ get_confirmation (), { print (f$ get_confirmation ()) }) } shinyApp (ui, server)","title":"Example"},{"location":"auth/social/","text":"Social \u00b6 Google Firebase integrates nicely with multiple social sites so users can easily login via: Google Github Facebook Twitter Console \u00b6 First, these need to be setup in the Firebase console. If you followed the get started guide you should already have enabled Google. Now we\u2019ll setup Github! Head over to the Firebase console Go to your project Open the \u201cAuthentication\u201d in the top left Visit the second tab \u201cSign-in method\u201d Select \u201cGithub\u201d This should present you with the screen below. It prompts you to enable it and enter your app id and app secret; notice the redirect url at the bottom of that box . These are taken from a Github OAuth application: follow this link to create yours and fill in the form. Callback URL Make sure you enter the \u201cAuthorization callback URL\u201d given to you by Firebase which resembles https://my-application.firebaseapp.com/__/auth/handler Package \u00b6 Once setup in the Firebase console you can use those social services in your shiny app. Let\u2019s create a basic shiny app that prompts the user to login on load; we\u2019ll provide . Remember to import the dependencies in the UI with useFirebase . library (shiny) library (firebase) # define signin signin <- modalDialog ( title = \"Login\" , actionButton ( \"google\" , \"Google\" , icon = icon ( \"google\" ), class = \"btn-danger\" ), actionButton ( \"github\" , \"Github\" , icon = icon ( \"github\" )), footer = NULL ) ui <- fluidPage ( useFirebase () # import dependencies ) server <- function (input, output) { showModal (signin) } shinyApp (ui, server) We are then going to initialise the authentication from the FirebaseSocial object. library (shiny) library (firebase) # define signin signin <- modalDialog ( title = \"Login\" , actionButton ( \"google\" , \"Google\" , icon = icon ( \"google\" ), class = \"btn-danger\" ), actionButton ( \"github\" , \"Github\" , icon = icon ( \"github\" )), footer = NULL ) ui <- fluidPage ( useFirebase () ) server <- function (input, output) { showModal (signin) f <- FirebaseSocial$ new () } shinyApp (ui, server) Finally, we can bind our buttons to actual sign in triggers. We do so with the different launch_* methods. library (shiny) library (firebase) # define signin signin <- modalDialog ( title = \"Login\" , actionButton ( \"google\" , \"Google\" , icon = icon ( \"google\" ), class = \"btn-danger\" ), actionButton ( \"github\" , \"Github\" , icon = icon ( \"github\" )), footer = NULL ) ui <- fluidPage ( useFirebase () ) server <- function (input, output) { showModal (signin) f <- FirebaseSocial$ new () observeEvent (input$google, { f$ launch_google () }) observeEvent (input$github, { f$ launch_github () }) } shinyApp (ui, server) Then again, we use the method req_sign_in to indicate observers and output that require the user to be logged in. Below we use the latter to remove the modal and display a plot. library (shiny) library (firebase) # define signin signin <- modalDialog ( title = \"Login\" , actionButton ( \"google\" , \"Google\" , icon = icon ( \"google\" ), class = \"btn-danger\" ), actionButton ( \"github\" , \"Github\" , icon = icon ( \"github\" )), footer = NULL ) ui <- fluidPage ( useFirebase (), plotOutput ( \"plot\" ) ) server <- function (input, output) { showModal (signin) f <- FirebaseSocial$ new () observeEvent (input$google, { f$ launch_google () }) observeEvent (input$github, { f$ launch_github () }) observe ({ f$ req_sign_in () removeModal () }) output$plot <- renderPlot ({ f$ req_sign_in () plot (cars) }) } shinyApp (ui, server)","title":"Social Login"},{"location":"auth/social/#social","text":"Google Firebase integrates nicely with multiple social sites so users can easily login via: Google Github Facebook Twitter","title":"Social"},{"location":"auth/social/#console","text":"First, these need to be setup in the Firebase console. If you followed the get started guide you should already have enabled Google. Now we\u2019ll setup Github! Head over to the Firebase console Go to your project Open the \u201cAuthentication\u201d in the top left Visit the second tab \u201cSign-in method\u201d Select \u201cGithub\u201d This should present you with the screen below. It prompts you to enable it and enter your app id and app secret; notice the redirect url at the bottom of that box . These are taken from a Github OAuth application: follow this link to create yours and fill in the form. Callback URL Make sure you enter the \u201cAuthorization callback URL\u201d given to you by Firebase which resembles https://my-application.firebaseapp.com/__/auth/handler","title":"Console"},{"location":"auth/social/#package","text":"Once setup in the Firebase console you can use those social services in your shiny app. Let\u2019s create a basic shiny app that prompts the user to login on load; we\u2019ll provide . Remember to import the dependencies in the UI with useFirebase . library (shiny) library (firebase) # define signin signin <- modalDialog ( title = \"Login\" , actionButton ( \"google\" , \"Google\" , icon = icon ( \"google\" ), class = \"btn-danger\" ), actionButton ( \"github\" , \"Github\" , icon = icon ( \"github\" )), footer = NULL ) ui <- fluidPage ( useFirebase () # import dependencies ) server <- function (input, output) { showModal (signin) } shinyApp (ui, server) We are then going to initialise the authentication from the FirebaseSocial object. library (shiny) library (firebase) # define signin signin <- modalDialog ( title = \"Login\" , actionButton ( \"google\" , \"Google\" , icon = icon ( \"google\" ), class = \"btn-danger\" ), actionButton ( \"github\" , \"Github\" , icon = icon ( \"github\" )), footer = NULL ) ui <- fluidPage ( useFirebase () ) server <- function (input, output) { showModal (signin) f <- FirebaseSocial$ new () } shinyApp (ui, server) Finally, we can bind our buttons to actual sign in triggers. We do so with the different launch_* methods. library (shiny) library (firebase) # define signin signin <- modalDialog ( title = \"Login\" , actionButton ( \"google\" , \"Google\" , icon = icon ( \"google\" ), class = \"btn-danger\" ), actionButton ( \"github\" , \"Github\" , icon = icon ( \"github\" )), footer = NULL ) ui <- fluidPage ( useFirebase () ) server <- function (input, output) { showModal (signin) f <- FirebaseSocial$ new () observeEvent (input$google, { f$ launch_google () }) observeEvent (input$github, { f$ launch_github () }) } shinyApp (ui, server) Then again, we use the method req_sign_in to indicate observers and output that require the user to be logged in. Below we use the latter to remove the modal and display a plot. library (shiny) library (firebase) # define signin signin <- modalDialog ( title = \"Login\" , actionButton ( \"google\" , \"Google\" , icon = icon ( \"google\" ), class = \"btn-danger\" ), actionButton ( \"github\" , \"Github\" , icon = icon ( \"github\" )), footer = NULL ) ui <- fluidPage ( useFirebase (), plotOutput ( \"plot\" ) ) server <- function (input, output) { showModal (signin) f <- FirebaseSocial$ new () observeEvent (input$google, { f$ launch_google () }) observeEvent (input$github, { f$ launch_github () }) observe ({ f$ req_sign_in () removeModal () }) output$plot <- renderPlot ({ f$ req_sign_in () plot (cars) }) } shinyApp (ui, server)","title":"Package"},{"location":"auth/state-persistence/","text":"State Persistence \u00b6 You can specify how the Authentication state persists. This includes the ability to specify whether a signed in user should be indefinitely persisted until explicit sign out, cleared when the window is closed or cleared on page reload. In Firebase, there are three options. none (default) - Indicates that the state will only be stored in memory and will be cleared when the window or activity is refreshed. local - Indicates that the state will be persisted even when the browser window is closed or the activity is destroyed in React Native. An explicit sign out is needed to clear that state. Note that Firebase Auth web sessions are single host origin and will be persisted for a single domain only. session - Indicates that the state will only persist in the current session or tab, and will be cleared when the tab or window in which the user authenticated is closed. Applies only to web apps. In the R package, you can modify state persistence with the persistence argument when instantiating the class with new . library (shiny) library (fireblaze) # define signin signin <- modalDialog ( title = \"Login\" , actionButton ( \"google\" , \"Google\" , icon = icon ( \"google\" ), class = \"btn-danger\" ), actionButton ( \"github\" , \"Github\" , icon = icon ( \"github\" )), footer = NULL ) ui <- fluidPage ( useFirebase (), uiOutput ( \"msg\" ) ) server <- function (input, output) { showModal (signin) f <- FirebaseSocial$ new (persistence = \"local\" ) observeEvent (input$google, { f$ launch_google () }) observeEvent (input$github, { f$ launch_github () }) output$msg <- renderUI ({ f$ req_sign_in () h3 ( \"Welcome!\" ) }) } shinyApp (ui, server)","title":"State Persistence"},{"location":"auth/state-persistence/#state-persistence","text":"You can specify how the Authentication state persists. This includes the ability to specify whether a signed in user should be indefinitely persisted until explicit sign out, cleared when the window is closed or cleared on page reload. In Firebase, there are three options. none (default) - Indicates that the state will only be stored in memory and will be cleared when the window or activity is refreshed. local - Indicates that the state will be persisted even when the browser window is closed or the activity is destroyed in React Native. An explicit sign out is needed to clear that state. Note that Firebase Auth web sessions are single host origin and will be persisted for a single domain only. session - Indicates that the state will only persist in the current session or tab, and will be cleared when the tab or window in which the user authenticated is closed. Applies only to web apps. In the R package, you can modify state persistence with the persistence argument when instantiating the class with new . library (shiny) library (fireblaze) # define signin signin <- modalDialog ( title = \"Login\" , actionButton ( \"google\" , \"Google\" , icon = icon ( \"google\" ), class = \"btn-danger\" ), actionButton ( \"github\" , \"Github\" , icon = icon ( \"github\" )), footer = NULL ) ui <- fluidPage ( useFirebase (), uiOutput ( \"msg\" ) ) server <- function (input, output) { showModal (signin) f <- FirebaseSocial$ new (persistence = \"local\" ) observeEvent (input$google, { f$ launch_google () }) observeEvent (input$github, { f$ launch_github () }) output$msg <- renderUI ({ f$ req_sign_in () h3 ( \"Welcome!\" ) }) } shinyApp (ui, server)","title":"State Persistence"},{"location":"auth/ui/","text":"Pre-built UI \u00b6 The easiest way to provide Shiny authentication with {firebase} is probably using the prebuilt UI put together by Google itself. We first configure the UI to include the sign-in services we want to enable, we launch the authentication service (together with the UI), then observe the user\u2019s interactions with the UI; sign-up success or failure. Introduction \u00b6 To demonstrate we will build an application that allows users to sign-up/sign-in. The very thing we do is place useFirebase in the Shiny UI, making sure you also place useFirebaseUI in there. This imports the necessary dependencies., without it nothing will work. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI () # import UI ) server <- function (input, output){} shinyApp (ui, server) Next we will instantiate the authentication service. We do so by calling the new method on the FirebaseUI object. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI () # import UI ) server <- function (input, output){ f <- FirebaseUI$ new () # instantiate } shinyApp (ui, server) Using that object f we just created we can configure our sign-up/sign-in options. There is but one mandatory setting; define the providers the user can use to sign-in. If you followed the get started guide you have already set-up the email and password as well as Google sign-in method. Let us configure these; set to TRUE the respective providers using the set_providers method. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI () # import UI ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE ) } shinyApp (ui, server) That is it for the mandatory options, you won\u2019t be able to launch the authentication method if you have not set the providers, {firebase} will remind you to do so. Now the next thing to do is launch the authentication. You could bind that to a button or have it launched when the app loads, all up to you. We\u2019ll go with the latter. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI () # import UI ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch } shinyApp (ui, server) Now if you the app presents you with a login screen! You can go ahead and login if you want to try but keep note of the following. Google Firebase manages very well the sign-up/sign-in process so that one barely sees the difference between creating an account and logging in. The first time you go through the process you create the account and are automatically signed in. If you want to test this process again, go to your Firebase console and delete yourself from the user list. Notice the warning in the console; this should be fixed when deploying to prod. #> Warning: Missing Terms of Service and/or Privacy policy URL, see `set_tos_url` and `set_privacy_policy_url` methods You can then pick up details on the authentication (like name and email) using the method get_signed_in , which in fact behaves like an input . Usage \u00b6 Finally, we currently provide a sign-in method but we do not do anything with it. Generally, we will need to block of hide all or the parts of the app that requires sign-in. There are two ways to go about this, 1) an insecure way in which we hide the UI elements before the user signs in but the user could, with basic CSS, reveal those elements before signing in. 2) A more secure way in which one waits for the user to sign in to render certain elements. The first happens UI-side and is very easy to implement, the second happens server-side. UI \u00b6 Rather straightforward but might not work for all elements. Use reqSignin to wrap UI elements that require sign in. Below we wrap some text and a plot, only signed in users can see them. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), reqSignin ( h4 ( \"VIP plot below\" ), plotOutput ( \"plot\" ) ) ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch output$plot <- renderPlot ({ plot (cars) }) } shinyApp (ui, server) Server \u00b6 Server-side you can either manually check that the user has signed in with the is_signed_in method, which returns TRUE if a user is signed in and FALSE otherwise. Or you can use the convenient req_sign_in in your outputs make sign in required for them. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), plotOutput ( \"plot\" ) ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch output$plot <- renderPlot ({ f$ req_sign_in () # require sign in plot (cars) }) } shinyApp (ui, server)","title":"Prebuilt UI"},{"location":"auth/ui/#pre-built-ui","text":"The easiest way to provide Shiny authentication with {firebase} is probably using the prebuilt UI put together by Google itself. We first configure the UI to include the sign-in services we want to enable, we launch the authentication service (together with the UI), then observe the user\u2019s interactions with the UI; sign-up success or failure.","title":"Pre-built UI"},{"location":"auth/ui/#introduction","text":"To demonstrate we will build an application that allows users to sign-up/sign-in. The very thing we do is place useFirebase in the Shiny UI, making sure you also place useFirebaseUI in there. This imports the necessary dependencies., without it nothing will work. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI () # import UI ) server <- function (input, output){} shinyApp (ui, server) Next we will instantiate the authentication service. We do so by calling the new method on the FirebaseUI object. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI () # import UI ) server <- function (input, output){ f <- FirebaseUI$ new () # instantiate } shinyApp (ui, server) Using that object f we just created we can configure our sign-up/sign-in options. There is but one mandatory setting; define the providers the user can use to sign-in. If you followed the get started guide you have already set-up the email and password as well as Google sign-in method. Let us configure these; set to TRUE the respective providers using the set_providers method. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI () # import UI ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE ) } shinyApp (ui, server) That is it for the mandatory options, you won\u2019t be able to launch the authentication method if you have not set the providers, {firebase} will remind you to do so. Now the next thing to do is launch the authentication. You could bind that to a button or have it launched when the app loads, all up to you. We\u2019ll go with the latter. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI () # import UI ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch } shinyApp (ui, server) Now if you the app presents you with a login screen! You can go ahead and login if you want to try but keep note of the following. Google Firebase manages very well the sign-up/sign-in process so that one barely sees the difference between creating an account and logging in. The first time you go through the process you create the account and are automatically signed in. If you want to test this process again, go to your Firebase console and delete yourself from the user list. Notice the warning in the console; this should be fixed when deploying to prod. #> Warning: Missing Terms of Service and/or Privacy policy URL, see `set_tos_url` and `set_privacy_policy_url` methods You can then pick up details on the authentication (like name and email) using the method get_signed_in , which in fact behaves like an input .","title":"Introduction"},{"location":"auth/ui/#usage","text":"Finally, we currently provide a sign-in method but we do not do anything with it. Generally, we will need to block of hide all or the parts of the app that requires sign-in. There are two ways to go about this, 1) an insecure way in which we hide the UI elements before the user signs in but the user could, with basic CSS, reveal those elements before signing in. 2) A more secure way in which one waits for the user to sign in to render certain elements. The first happens UI-side and is very easy to implement, the second happens server-side.","title":"Usage"},{"location":"auth/ui/#ui","text":"Rather straightforward but might not work for all elements. Use reqSignin to wrap UI elements that require sign in. Below we wrap some text and a plot, only signed in users can see them. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), reqSignin ( h4 ( \"VIP plot below\" ), plotOutput ( \"plot\" ) ) ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch output$plot <- renderPlot ({ plot (cars) }) } shinyApp (ui, server)","title":"UI"},{"location":"auth/ui/#server","text":"Server-side you can either manually check that the user has signed in with the is_signed_in method, which returns TRUE if a user is signed in and FALSE otherwise. Or you can use the convenient req_sign_in in your outputs make sign in required for them. library (shiny) library (firebase) ui <- fluidPage ( useFirebase (), # import dependencies useFirebaseUI (), plotOutput ( \"plot\" ) ) server <- function (input, output){ f <- FirebaseUI$ new ()$ # instantiate set_providers ( # define providers email = TRUE , google = TRUE )$ launch () # launch output$plot <- renderPlot ({ f$ req_sign_in () # require sign in plot (cars) }) } shinyApp (ui, server)","title":"Server"},{"location":"guide/config/","text":"Configuration \u00b6 At this point you will need the R package, install it from Github if you haven\u2019t already done so. remotes:: install_github ( \"JohnCoene/firebase\" ) Navigate to your credentials page: Click the gear icon in the top left. Click \u201cproject settings\u201d Scroll to the bottom of the \u201cGeneral\u201d tab to find your app credentials. In there you should find two key things apiKey and projectId . We will need these to configure {firebase} Project ID If you manually changed the project_id use that in the function call below, not the one originally created by Google. In brief, use the id that is found in the URL of your project. You can either create a configuration file with the firebase_config function or by setting environment variables. Environment Variables FIREBASE_API_KEY FIREBASE_PROJECT_ID FIREBASE_AUTH_DOMAIN FIREBASE_STORAGE_BUCKET FIREBASE_APP_ID Config file firebase:: firebase_config ( api_key = \"xXxxXxx\" , project_id = \"my-project-package\" ) This is necessary for every project that uses {firebase}; the package will, first, look for it in the working directory by default, second it will look for the environment variables.","title":"Config"},{"location":"guide/config/#configuration","text":"At this point you will need the R package, install it from Github if you haven\u2019t already done so. remotes:: install_github ( \"JohnCoene/firebase\" ) Navigate to your credentials page: Click the gear icon in the top left. Click \u201cproject settings\u201d Scroll to the bottom of the \u201cGeneral\u201d tab to find your app credentials. In there you should find two key things apiKey and projectId . We will need these to configure {firebase} Project ID If you manually changed the project_id use that in the function call below, not the one originally created by Google. In brief, use the id that is found in the URL of your project. You can either create a configuration file with the firebase_config function or by setting environment variables. Environment Variables FIREBASE_API_KEY FIREBASE_PROJECT_ID FIREBASE_AUTH_DOMAIN FIREBASE_STORAGE_BUCKET FIREBASE_APP_ID Config file firebase:: firebase_config ( api_key = \"xXxxXxx\" , project_id = \"my-project-package\" ) This is necessary for every project that uses {firebase}; the package will, first, look for it in the working directory by default, second it will look for the environment variables.","title":"Configuration"},{"location":"guide/get-started/","text":"Get Satrted \u00b6 The {firebase} package lets you create mechanisms to authenticate Shiny users. It does so by wrapping the Firebase interface by Google. This probably raises a first question, is it free? The answer to which is, this package only features the free functionalities which should, for now, probably fulfil most Shiny developers\u2019 needs. !!! \u201cSkip Ahead\u201d In this first section we create a Google Firebase project, if you know how to do this or already have one, skip to the package configuration section. Create a Project \u00b6 First, create a Google firebase account if you do not already have one; head to firebase.google.com , and set up your account. Once this done you will be presented with the screen below. First step, hit that large white button reading \u201cCreate a project,\u201d then give your project a name. Second step, either leave Google Analytics enabled to integrate your project with it or disable it. If confused, disable it, this can always be enabled later. After that you should be done and eventually, after an intermediary screen, be presented with the project screen (below). Click the \u201cweb\u201d icon (highlighted in red ). On the next screen name your app, then hit \u201cRegister app\u201d. This might be confusing, a project will share sign-in users but may be comprised of different apps (iOS, web, etc.) On the next screen simply hit \u201cContinue to console,\u201d you should not be concerned with any of the code presented, {firebase} takes care of it for you. This will lead you straight into the project you have just created. Define Methods \u00b6 Visit \u201cAuthentication\u201d the left sidebar then click the most prominent button that reads \u201cSet up sign-in method.\u201d This screen lets you set-up which authentication methods you want to provide. Some only require a click, others need to be integrated with third-party services, all of which are very straightforward. We will begin with the easier ones: email & password, and Google. This is will let users sign in by entering their email and password or using their Google account. Click Email/password then the first enable button at the top. We will cover the second option later on. The first will require the user to enter their email and password, the second will users a sign-in link via email, thereby removing the need for a password. Then enable Google (form below). Fill the form as you see fit, don\u2019t forget to toggle \u201cenable\u201d unlike I did above, and click save. Finally set the redirect URLs, these are the URLs to which the user can be redirected after authenticating, add your localhost and or 127.0.0.1 so that your application can be tested locally. You will eventually have to add the URL of your the application(s).","title":"Project Setup"},{"location":"guide/get-started/#get-satrted","text":"The {firebase} package lets you create mechanisms to authenticate Shiny users. It does so by wrapping the Firebase interface by Google. This probably raises a first question, is it free? The answer to which is, this package only features the free functionalities which should, for now, probably fulfil most Shiny developers\u2019 needs. !!! \u201cSkip Ahead\u201d In this first section we create a Google Firebase project, if you know how to do this or already have one, skip to the package configuration section.","title":"Get Satrted"},{"location":"guide/get-started/#create-a-project","text":"First, create a Google firebase account if you do not already have one; head to firebase.google.com , and set up your account. Once this done you will be presented with the screen below. First step, hit that large white button reading \u201cCreate a project,\u201d then give your project a name. Second step, either leave Google Analytics enabled to integrate your project with it or disable it. If confused, disable it, this can always be enabled later. After that you should be done and eventually, after an intermediary screen, be presented with the project screen (below). Click the \u201cweb\u201d icon (highlighted in red ). On the next screen name your app, then hit \u201cRegister app\u201d. This might be confusing, a project will share sign-in users but may be comprised of different apps (iOS, web, etc.) On the next screen simply hit \u201cContinue to console,\u201d you should not be concerned with any of the code presented, {firebase} takes care of it for you. This will lead you straight into the project you have just created.","title":"Create a Project"},{"location":"guide/get-started/#define-methods","text":"Visit \u201cAuthentication\u201d the left sidebar then click the most prominent button that reads \u201cSet up sign-in method.\u201d This screen lets you set-up which authentication methods you want to provide. Some only require a click, others need to be integrated with third-party services, all of which are very straightforward. We will begin with the easier ones: email & password, and Google. This is will let users sign in by entering their email and password or using their Google account. Click Email/password then the first enable button at the top. We will cover the second option later on. The first will require the user to enter their email and password, the second will users a sign-in link via email, thereby removing the need for a password. Then enable Google (form below). Fill the form as you see fit, don\u2019t forget to toggle \u201cenable\u201d unlike I did above, and click save. Finally set the redirect URLs, these are the URLs to which the user can be redirected after authenticating, add your localhost and or 127.0.0.1 so that your application can be tested locally. You will eventually have to add the URL of your the application(s).","title":"Define Methods"},{"location":"misc/changelog/","text":"firebase 1.0.0.9000 \u00b6 Add support for phone sign in. Remove deprecated create_config function, use firebase_config . Fix issue with persistence ##14 Upgrade firebase.js to modular, tree-shakable version 9 (latest) Use packer to bundle with webpack for better performances and load time. Clean up core class, deprecating several (genuinely) useless methods. Deprecate useFirebaseUI in favour of firebaseUIContainer . In useFirebase deprecate analytics and firestore arguments. Breaking FirebaseEmailLink the method called send has been renamed to send_email : this method was overwriting an internal private method, actually breaking many things. Added Storage class to use Firebase Storage , requires the user to be signed in. Added Analytics class to use Firebase Analytics Add ability to use environment variables instead of the firebase config file ##15 firebase 0.2.1 \u00b6 Allow firebase to work in modules. Added email_link to FirebaseUI . Added request_token_id and get_id_token methods to retrieve the user\u2019s id token. Update firebase and friends to v8.1 firebase 0.2.0 \u00b6 Fix potential security issue ##11 Add logging in many places to make it easier to debug firebase 0.1.1 \u00b6 Deprecate the function create_config in favour of firebase_config firebase 0.1.0 \u00b6 First CRAN submission. All get_ methods return a list of length 2 containing success a boolean indicating whether to operation was successful and response containing the result of the response if there is one, otherwise the string successful , or the error if there is one. firebase 0.0.1.9000 \u00b6 Initial version","title":"Changelog"},{"location":"misc/changelog/#firebase-1009000","text":"Add support for phone sign in. Remove deprecated create_config function, use firebase_config . Fix issue with persistence ##14 Upgrade firebase.js to modular, tree-shakable version 9 (latest) Use packer to bundle with webpack for better performances and load time. Clean up core class, deprecating several (genuinely) useless methods. Deprecate useFirebaseUI in favour of firebaseUIContainer . In useFirebase deprecate analytics and firestore arguments. Breaking FirebaseEmailLink the method called send has been renamed to send_email : this method was overwriting an internal private method, actually breaking many things. Added Storage class to use Firebase Storage , requires the user to be signed in. Added Analytics class to use Firebase Analytics Add ability to use environment variables instead of the firebase config file ##15","title":"firebase 1.0.0.9000"},{"location":"misc/changelog/#firebase-021","text":"Allow firebase to work in modules. Added email_link to FirebaseUI . Added request_token_id and get_id_token methods to retrieve the user\u2019s id token. Update firebase and friends to v8.1","title":"firebase 0.2.1"},{"location":"misc/changelog/#firebase-020","text":"Fix potential security issue ##11 Add logging in many places to make it easier to debug","title":"firebase 0.2.0"},{"location":"misc/changelog/#firebase-011","text":"Deprecate the function create_config in favour of firebase_config","title":"firebase 0.1.1"},{"location":"misc/changelog/#firebase-010","text":"First CRAN submission. All get_ methods return a list of length 2 containing success a boolean indicating whether to operation was successful and response containing the result of the response if there is one, otherwise the string successful , or the error if there is one.","title":"firebase 0.1.0"},{"location":"misc/changelog/#firebase-0019000","text":"Initial version","title":"firebase 0.0.1.9000"},{"location":"misc/coc/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards \u00b6 Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities \u00b6 Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope \u00b6 This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines \u00b6 Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction \u00b6 Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning \u00b6 Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban \u00b6 Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban \u00b6 Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla\u2019s code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https:// www.contributor-covenant.org/translations.","title":"Code of Conduct"},{"location":"misc/coc/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"misc/coc/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"misc/coc/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"misc/coc/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"misc/coc/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"misc/coc/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"misc/coc/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"misc/coc/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"misc/coc/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"misc/coc/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"misc/coc/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"misc/coc/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla\u2019s code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https:// www.contributor-covenant.org/translations.","title":"Attribution"},{"location":"misc/license/","text":"GNU Affero General Public License \u00b6 Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. < https://fsf.org/ > Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble \u00b6 The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program\u2013to make sure it remains free software for all its users. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software. A secondary benefit of defending all users\u2019 freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public. The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version. An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS \u00b6 0. Definitions. \u00b6 \u201cThis License\u201d refers to version 3 of the GNU Affero General Public License. \u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations. To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work. A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program. To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. \u00b6 The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work. A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work\u2019s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. \u00b6 All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users\u2019 Legal Rights From Anti-Circumvention Law. \u00b6 No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work\u2019s users, your or third parties\u2019 legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. \u00b6 You may convey verbatim copies of the Program\u2019s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. \u00b6 You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d. c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation\u2019s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. \u00b6 You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \u00b6 \u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. \u00b6 You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. \u00b6 You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. \u00b6 Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party\u2019s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. \u00b6 A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor\u2019s \u201ccontributor version\u201d. A contributor\u2019s \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor\u2019s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient\u2019s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others\u2019 Freedom. \u00b6 If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Remote Network Interaction; Use with the GNU General Public License. \u00b6 Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License. 14. Revised Versions of this License. \u00b6 The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. \u00b6 THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. \u00b6 IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. \u00b6 If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs \u00b6 If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \u201cSource\u201d link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements. You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/ .","title":"License"},{"location":"misc/license/#gnu-affero-general-public-license","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. < https://fsf.org/ > Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.","title":"GNU Affero General Public License"},{"location":"misc/license/#preamble","text":"The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program\u2013to make sure it remains free software for all its users. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software. A secondary benefit of defending all users\u2019 freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public. The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version. An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license. The precise terms and conditions for copying, distribution and modification follow.","title":"Preamble"},{"location":"misc/license/#terms-and-conditions","text":"","title":"TERMS AND CONDITIONS"},{"location":"misc/license/#0-definitions","text":"\u201cThis License\u201d refers to version 3 of the GNU Affero General Public License. \u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations. To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work. A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program. To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.","title":"0. Definitions."},{"location":"misc/license/#1-source-code","text":"The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work. A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work\u2019s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work.","title":"1. Source Code."},{"location":"misc/license/#2-basic-permissions","text":"All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.","title":"2. Basic Permissions."},{"location":"misc/license/#3-protecting-users-legal-rights-from-anti-circumvention-law","text":"No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work\u2019s users, your or third parties\u2019 legal rights to forbid circumvention of technological measures.","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law."},{"location":"misc/license/#4-conveying-verbatim-copies","text":"You may convey verbatim copies of the Program\u2019s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.","title":"4. Conveying Verbatim Copies."},{"location":"misc/license/#5-conveying-modified-source-versions","text":"You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d. c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation\u2019s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.","title":"5. Conveying Modified Source Versions."},{"location":"misc/license/#6-conveying-non-source-forms","text":"You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.","title":"6. Conveying Non-Source Forms."},{"location":"misc/license/#7-additional-terms","text":"\u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.","title":"7. Additional Terms."},{"location":"misc/license/#8-termination","text":"You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.","title":"8. Termination."},{"location":"misc/license/#9-acceptance-not-required-for-having-copies","text":"You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.","title":"9. Acceptance Not Required for Having Copies."},{"location":"misc/license/#10-automatic-licensing-of-downstream-recipients","text":"Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party\u2019s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.","title":"10. Automatic Licensing of Downstream Recipients."},{"location":"misc/license/#11-patents","text":"A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor\u2019s \u201ccontributor version\u201d. A contributor\u2019s \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor\u2019s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient\u2019s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.","title":"11. Patents."},{"location":"misc/license/#12-no-surrender-of-others-freedom","text":"If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.","title":"12. No Surrender of Others' Freedom."},{"location":"misc/license/#13-remote-network-interaction-use-with-the-gnu-general-public-license","text":"Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.","title":"13. Remote Network Interaction; Use with the GNU General Public License."},{"location":"misc/license/#14-revised-versions-of-this-license","text":"The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.","title":"14. Revised Versions of this License."},{"location":"misc/license/#15-disclaimer-of-warranty","text":"THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.","title":"15. Disclaimer of Warranty."},{"location":"misc/license/#16-limitation-of-liability","text":"IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","title":"16. Limitation of Liability."},{"location":"misc/license/#17-interpretation-of-sections-15-and-16","text":"If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS","title":"17. Interpretation of Sections 15 and 16."},{"location":"misc/license/#how-to-apply-these-terms-to-your-new-programs","text":"If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \u201cSource\u201d link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements. You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/ .","title":"How to Apply These Terms to Your New Programs"}]}